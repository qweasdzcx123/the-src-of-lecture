A Hierarchical Neural Autoencoder for Paragraphs and Documents
Jiwei Li, Minh-Thang Luong and Dan Jurafsky
Computer Science Department, Stanford University, Stanford, CA 94305, USA jiweil, lmthang, jurafsky@stanford.edu

arXiv:1506.01057v2 [cs.CL] 6 Jun 2015

Abstract
Natural language generation of coherent long texts like paragraphs or longer documents is a challenging problem for recurrent networks models. In this paper, we explore an important step toward this generation task: training an LSTM (Longshort term memory) auto-encoder to preserve and reconstruct multi-sentence paragraphs. We introduce an LSTM model that hierarchically builds an embedding for a paragraph from embeddings for sentences and words, then decodes this embedding to reconstruct the original paragraph. We evaluate the reconstructed paragraph using standard metrics like ROUGE and Entity Grid, showing that neural models are able to encode texts in a way that preserve syntactic, semantic, and discourse coherence. While only a ﬁrst step toward generating coherent text units from neural models, our work has the potential to signiﬁcantly impact natural language generation and summarization1.
1 Introduction
Generating coherent text is a central task in natural language processing. A wide variety of theories exist for representing relationships between text units, such as Rhetorical Structure Theory (Mann and Thompson, 1988) or Discourse Representation Theory (Lascarides and Asher, 1991), for extracting these relations from text units (Marcu, 2000; LeThanh et al., 2004; Hernault et al., 2010; Feng and Hirst, 2012, inter alia), and for extracting other coherence properties characterizing the role each text unit plays with others in a discourse (Barzilay and Lapata, 2008; Barzilay and Lee,
1Code for models described in this paper are available at www.stanford.edu/˜jiweil/.

2004; Elsner and Charniak, 2008; Li and Hovy, 2014, inter alia). However, applying these to text generation remains difﬁcult. To understand how discourse units are connected, one has to understand the communicative function of each unit, and the role it plays within the context that encapsulates it, recursively all the way up for the entire text. Identifying increasingly sophisticated human-developed features may be insufﬁcient for capturing these patterns. But developing neuralbased alternatives has also been difﬁcult. Although neural representations for sentences can capture aspects of coherent sentence structure (Ji and Eisenstein, 2014; Li et al., 2014; Li and Hovy, 2014), it’s not clear how they could help in generating more broadly coherent text.
Recent LSTM models (Hochreiter and Schmidhuber, 1997) have shown powerful results on generating meaningful and grammatical sentences in sequence generation tasks like machine translation (Sutskever et al., 2014; 0; Luong et al., 2015) or parsing (Vinyals et al., 2014). This performance is at least partially attributable to the ability of these systems to capture local compositionally: the way neighboring words are combined semantically and syntactically to form meanings that they wish to express.
Could these models be extended to deal with generation of larger structures like paragraphs or even entire documents? In standard sequenceto-sequence generation tasks, an input sequence is mapped to a vector embedding that represents the sequence, and then to an output string of words. Multi-text generation tasks like summarization could work in a similar way: the system reads a collection of input sentences, and is then asked to generate meaningful texts with certain properties (such as—for summarization— being succinct and conclusive). Just as the local semantic and syntactic compositionally of words can be captured by LSTM models, can the com-

positionally of discourse releations of higher-level text units (e.g., clauses, sentences, paragraphs, and documents) be captured in a similar way, with clues about how text units connect with each another stored in the neural compositional matrices?
In this paper we explore a ﬁrst step toward this task of neural natural language generation. We focus on the component task of training a paragraph (document)-to-paragraph (document) autoencoder to reconstruct the input text sequence from a compressed vector representation from a deep learning model. We develop hierarchical LSTM models that arranges tokens, sentences and paragraphs in a hierarchical structure, with different levels of LSTMs capturing compositionality at the tokentoken and sentence-to-sentence levels.
We offer in the following section to a brief description of sequence-to-sequence LSTM models. The proposed hierarchical LSTM models are then described in Section 3, followed by experimental results in Section 4, and then a brief conclusion.

2 Long-Short Term Memory (LSTM)
In this section we give a quick overview of LSTM models. LSTM models (Hochreiter and Schmidhuber, 1997) are deﬁned as follows: given a sequence of inputs X = {x1, x2, ..., xnX }, an LSTM associates each timestep with an input, memory and output gate, respectively denoted as it, ft and ot. For notations, we disambiguate e and h where et denote the vector for individual text unite (e.g., word or sentence) at time step t while ht denotes the vector computed by LSTM model at time t by combining et and ht−1. σ denotes the sigmoid function. The vector representation ht for each time-step t is given by:

it

σ

ft ot

=

σ σ

W·

ht−1 et

(1)

lt

tanh

ct = ft · ct−1 + it · lt

(2)

hst = ot · ct

(3)

where W ∈ R4K×2K In sequence-to-sequence generation tasks, each input X is paired with a sequence of outputs to predict: Y = {y1, y2, ..., ynY }. An LSTM deﬁnes a distribution over outputs and sequentially predicts tokens us-

ing a softmax function:

P (Y |X)

=

p(yt|x1, x2, ..., xt, y1, y2, ..., yt−1)

t∈[1,ny ]

=
t∈[1,ny ]

exp(f (ht−1, eyt )) y exp(f (ht−1, ey ))

(4)

f (ht−1, eyt) denotes the activation function between eh−1 and eyt, where ht−1 is the representation outputted from the LSTM at time t − 1. Note

that each sentence ends up with a special end-of-

sentence symbol <end>. Commonly, the input

and output use two different LSTMs with differ-

ent sets of convolutional parameters for capturing

different compositional patterns.

In the decoding procedure, the algorithm termi-

nates when an <end> token is predicted. At each

timestep, either a greedy approach or beam search

can be adopted for word prediction. Greedy search

selects the token with the largest conditional prob-

ability, the embedding of which is then combined

with preceding output for next step token predic-

tion. For beam search, (Sutskever et al., 2014) dis-

covered that a beam size of 2 sufﬁces to provide

most of beneﬁts of beam search.

3 Paragraph Autoencoder

In this section, we introduce our proposed hierarchical LSTM model for the autoencoder.

3.1 Notation
Let D denote a paragraph or a document, which is comprised of a sequence of ND sentences, D = {s1, s2, ..., sND , endD}. An additional ”endD” token is appended to each document. Each sentence s is comprised of a sequence of tokens s = {w1, w2, ..., wNs} where Ns denotes the length of the sentence, each sentence ending with an “ends” token. The word w is associated with a K-dimensional embedding ew, ew = {e1w, e2w, ..., eKw }. Let V denote vocabulary size. Each sentence s is associated with a Kdimensional representation es.
An autoencoder is a neural model where output units are directly connected with or identical to input units. Typically, inputs are compressed into a representation using neural models (encoding), which is then used to reconstruct it back (decoding). For a paragraph autoencoder, both the input X and output Y are the same document D. The

autoencoder ﬁrst compresses D into a vector representation eD and then reconstructs D based on eD .
For simplicity, we deﬁne LST M (ht−1, et) to be the LSTM operation on vectors ht−1 and et to achieve ht as in Equ.1 and 2. For clariﬁcation, we ﬁrst describe the following notations used in encoder and decoder:
• hwt and hst denote hidden vectors from LSTM models, the subscripts of which indicate timestep t, the superscripts of which indicate operations at word level (w) or sequence level (s). hst (enc) speciﬁes encoding stage and hst (dec) speciﬁes decoding stage.
• ewt and est denotes word-level and sentencelevel embedding for word and sentence at position t in terms of its residing sentence or document.
3.2 Model 1: Standard LSTM
The whole input and output are treated as one sequence of tokens. Following Sutskever et al. (2014) and 0), we trained an autoencoder that ﬁrst maps input documents into vector representations from a LST Mencode and then reconstructs inputs by predicting tokens within the document sequentially from a LST Mdecode. Two separate LSTMs are implemented for encoding and decoding with no sentence structures considered. Illustration is shown in Figure 1.
3.3 Model 2: Hierarchical LSTM
The hierarchical model draws on the intuition that just as the juxtaposition of words creates a joint meaning of a sentence, the juxtaposition of sentences also creates a joint meaning of a paragraph or a document.
Encoder We ﬁrst obtain representation vectors at the sentence level by putting one layer of LSTM (denoted as LST Mewnocrodde) on top of its containing words:
hwt (enc) = LST Mewnocrodde(ewt , hwt−1(enc)) (5)
The vector output at the ending time-step is used to represent the entire sentence as
es = hwends
To build representation eD for the current document/paragraph D, another layer of LSTM (denoted as LST Mesnecnotednece) is placed on top of all sentences, computing representations sequentially for

each timestep:
hst (enc) = LST Mesnecnotednece(est , hst−1(enc)) (6)
Representation esendD computed at the ﬁnal time step is used to represent the entire document: eD = hsendD .
Thus one LSTM operates at the token level, leading to the acquisition of sentence-level representations that are then used as inputs into the second LSTM that acquires document-level representations, in a hierarchical structure.
Decoder As with encoding, the decoding algorithm operates on a hierarchical structure with two layers of LSTMs. LSTM outputs at sentence level for time step t are obtained by:
hst (dec) = LST Mdseecnotednece(est , hst−1(dec)) (7)
The initial time step hs0(d) = eD, the end-to-end output from the encoding procedure. hst (d) is used as the original input into LST Mdweocordde for subsequently predicting tokens within sentence t + 1. LST Mdweocordde predicts tokens at each position sequentially, the embedding of which is then combined with earlier hidden vectors for the next timestep prediction until the ends token is predicted. The procedure can be summarized as follows:
hwt (dec) = LST Mdseecnotednece(ewt , hwt−1(dec)) (8)
p(w|·) = softmax(ew, hwt−1(dec)) (9)
During decoding, LST Mdweocordde generates each word token w sequentially and combines it with earlier LSTM-outputted hidden vectors. The LSTM hidden vector computed at the ﬁnal time step is used to represent the current sentence.
This is passed to LST Mdseecnotdeence, combined with hst for the acquisition of ht+1, and outputted to the next time step in sentence decoding.
For each timestep t, LST Mdseecnotdeence has to ﬁrst decide whether decoding should proceed or come to a full stop: we add an additional token endD to the vocabulary. Decoding terminates when token endD is predicted. Details are shown in Figure 2.
3.4 Model 3: Hierarchical LSTM with Attention
Attention models adopt a look-back strategy by linking the current decoding stage with input sentences in an attempt to consider which part of the input is most responsible for the current decoding

Figure 1: Standard Sequence to Sequence Model.

Figure 2: Hierarchical Sequence to Sequence Model.

Figure 3: Hierarchical Sequence to Sequence Model with Attention.

state. This attention version of hierarchical model
is inspired by similar work in image caption gen-
eration and machine translation (Xu et al., 2015;
0). Let H = {hs1(e), hs2(e), ..., hsN (e)} be the
collection of sentence-level hidden vectors for

each sentence from the inputs, outputted from LST MeSnecnotdenece. Each element in H contains information about input sequences with a strong fo-
cus on the parts surrounding each speciﬁc sentence (time-step). During decoding, suppose that est denotes the sentence-level embedding at current step

and that hst−1(dec) denotes the hidden vector outputted from LST Mdseecnotdeence at previous time step t−1. Attention models would ﬁrst link the currentstep decoding information, i.e., hst−1(dec) which is outputted from LST Mdseecntence with each of the input sentences i ∈ [1, N ], characterized by a
strength indicator vi:

vi = U T f (W1 · hst−1(dec) + W2 · hsi (enc)) (10)

W1, W2 ∈ RK×K , U ∈ RK×1. vi is then normal-

ized:

ai =

exp(vi) i exp(vi)

(11)

The attention vector is then created by averaging

weights over all input sentences:

mt =

aihsi (enc)

(12)

i∈[1,ND ]

LSTM hidden vectors for current step is then achieved by combining ct, est and hst−1(dec):

it ft ot lt

=

σ σ σ W· tanh

hst−1(dec) est mt

(13)

ct = ft · ct−1 + it · lt

(14)

hst = ot · ct

(15)

where W ∈ R4K×3K . ht is then used for word

predicting as in the vanilla version of the hierar-

chical model.

3.5 Training and Testing
Parameters are estimated by maximizing likelihood of outputs given inputs, similar to standard sequence-to-sequence models. A softmax function is adopted for predicting each token within output documents, the error of which is ﬁrst backpropagated through LST Mdweocordde to sentences, then through LST Mdseecnotdeence to document representation eD, and last through LST Mesnecnotdeence and LST Mewnocordde to inputs. Stochastic gradient descent with minibatches is adopted.
For testing, we adopt a greedy strategy with no beam search. For a given document D, eD is ﬁrst obtained given already learned LSTMencode parameters and word embeddings. Then in decoding, LST Mdseecnotednece computes embeddings at each sentence-level time-step, which is ﬁrst fed into the binary classiﬁer to decide whether sentence decoding terminates and then into LST Mdweocrodde for word decoding.

dataset S per D W per D W per S

Hotel-Review 8.8 124.8 14.1

Wikipedia

8.4

132.9 14.8

Table 1: Statistics for the Datasets. W, S and D respectively represent number of words, number of sentences, and number of documents/paragraphs. For example, “S per D” denotes average number of sentences per document.

4 Experiments
4.1 Dataset
We implement the proposed autoencoder on two datasets, a highly domain speciﬁc dataset consisting of hotel reviews and a general dataset extracted from Wkipedia.
Hotel Reviews We use a subset of hotel reviews crawled from TripAdvisor. We consider only reviews consisting sentences ranging from 50 to 250 words; the model has problems dealing with extremely long sentences, as we will discuss later. We keep a vocabulary set consisting of the 25,000 most frequent words. A special “<unk>” token is used to denote all the remaining less frequent tokens. Reviews that consist of more than 2 percent of unknown words are discarded. Our training dataset is comprised of roughly 340,000 reviews; the testing set is comprised of 40,000 reviews. Dataset details are shown in Table 1.
Wikipedia We extracted paragraphs from Wikipedia corpus that meet the aforementioned length requirements. We keep a top frequent vocabulary list of 120,000 words. Paragraphs with larger than 4 percent of unknown words are discarded. The training dataset is comprised of roughly 500,000 paragraphs and testing contains roughly 50,000.
4.2 Training Details and Implementation
Previous research has shown that deep LSTMs work better than shallow ones for sequence-tosequence tasks (Vinyals et al., 2014; Sutskever et al., 2014). We adopt a LSTM structure with four layer for encoding and four layer for decoding, each of which is comprised of a different set of parameters. Each LSTM layer consists of 1,000 hidden neurons and the dimensionality of word embeddings is set to 1,000. Other training details are given below, some of which follow Sutskever et al. (2014).

• Input documents are reversed. • LSTM parameters and word embeddings are
initialized from a uniform distribution between [-0.08, 0.08]. • Stochastic gradient decent is implemented without momentum using a ﬁxed learning rate of 0.1. We stated halving the learning rate every half epoch after 5 epochs. We trained our models for a total of 7 epochs. • Batch size is set to 32 (32 documents). • Decoding algorithm allows generating at most 1.5 times the number of words in inputs. • 0.2 dropout rate. • Gradient clipping is adopted by scaling gradients when the norm exceeded a threshold of 5. Our implementation on a single GPU2 processes a speed of approximately 600-1,200 tokens per second. We trained our models for a total of 7 iterations.

4.3 Evaluations
We need to measure the closeness of the output (candidate) to the input (reference). We ﬁrst adopt two standard evaluation metrics, ROUGE (Lin, 2004; Lin and Hovy, 2003) and BLEU (Papineni et al., 2002).

ROUGE is a recall-oriented measure widely used in the summarization literature. It measures the n-gram recall between the candidate text and the reference text(s). In this work, we only have one reference document (the input document) and ROUGE score is therefore given by:

ROUGEn =

gramn∈input countmatch(gramn)
gramn∈input count(gramn) (16)

where countmatch denotes the number of n-grams co-occurring in the input and output. We report

ROUGE-1, 2 and W (based on weighted longest

common subsequence).

BLEU Purely measuring recall will inappropriately reward long outputs. BLEU is designed to address such an issue by emphasizing precision. n-gram precision scores for our situation are given by:

precisionn =

gramn∈output countmatch(gramn)
gramn∈output count(gramn) (17)

2Tesla K40m, 1 Kepler GK110B, 2880 Cuda cores.

BLEU then combines the average logarithm of precision scores with exceeded length penalization. For details, see Papineni et al. (2002).

Coherence Evaluation Neither BLEU nor ROUGE attempts to evaluate true coherence. There is no generally accepted and readily available coherence evaluation metric.3 Because of the difﬁculty of developing a universal coherence evaluation metric, we proposed here only a tailored metric speciﬁc to our case. Based on the assumption that human-generated texts (i.e., input documents in our tasks) are coherent (Barzilay and Lapata, 2008), we compare generated outputs with input documents in terms of how much original text order is preserved.
We develop a grid evaluation metric similar to the entity transition algorithms in (Barzilay and Lee, 2004; Lapata and Barzilay, 2005). The key idea of Barzilay and Lapata’s models is to ﬁrst identify grammatical roles (i.e., object and subject) that entities play and then model the transition probability over entities and roles across sentences. We represent each sentence as a featurevector consisting of verbs and nouns in the sentence. Next we align sentences from output documents to input sentences based on sentence-tosentence F1 scores (precision and recall are computed similarly to ROUGE and BLEU but at sentence level) using feature vectors. Note that multiple output sentences can be matched to one input sentence. Assume that sentence sioutput is aligned with sentence siinput, where i and i denote position index for a output sentence and its aligned input. The penalization score L is then given by:

2 L=
Noutput · (Noutput − 1)

×

|(j − i) − (j − i )|

i∈[1,Noutput−1] j∈[i+1,Noutput]

(18)

Equ. 18 can be interpreted as follows: (j − i)
denotes the distance in terms of position index between two outputted sentences indexed by j and i,
3Wolf and Gibson (2005) and Lin et al. (2011) proposed metrics based on discourse relations, but these are hard to apply widely since identifying discourse relations is a difﬁcult problem. Indeed sophisticated coherence evaluation metrics are seldom adopted in real-world applications, and summarization researchers tend to use simple approximations like number of overlapped tokens or topic distribution similarity (e.g., (Yan et al., 2011b; Yan et al., 2011a; Celikyilmaz and Hakkani-Tu¨r, 2011)).

Input-Wiki
Output-Wiki
Input-Wiki Output-Wiki Input-Wiki Output-Wiki Input-Review Output-Review

washington was unanimously elected President by the electors in both the 1788 – 1789 and 1792 elections . he oversaw the creation of a strong, well-ﬁnanced national government that maintained neutrality in the french revolutionary wars , suppressed the whiskey rebellion , and won acceptance among Americans of all types . washington established many forms in government still used today , such as the cabinet system and inaugural address . his retirement after two terms and the peaceful transition from his presidency to that of john adams established a tradition that continued up until franklin d . roosevelt was elected to a third term . washington has been widely hailed as the ” father of his country ” even during his lifetime. washington was elected as president in 1792 and voters <unk> of these two elections until 1789 . he continued suppression <unk> whiskey rebellion of the french revolution war government , strong , national well are involved in the establishment of the ﬁn advanced operations , won acceptance . as in the government , such as the establishment of various forms of inauguration speech washington , and are still in use . <unk> continued after the two terms of his quiet transition to retirement of <unk> <unk> of tradition to have been elected to the third paragraph . but , ” the united nations of the father ” and in washington in his life , has been widely praised .
apple inc . is an american multinational corporation headquartered in cupertino , california , that designs , develops , and sells consumer electronics , computer software , online services , and personal com - puters . its bestknown hardware products are the mac line of computers , the ipod media player , the iphone smartphone , and the ipad tablet computer . its online services include icloud , the itunes store , and the app store . apple’s consumer software includes the os x and ios operating systems , the itunes media browser , the safari web browser , and the ilife and iwork creativity and productivity suites . apple is a us company in california , <unk> , to develop electronics , softwares , and pc , sells . hardware include the mac series of computers , ipod , iphone . its online services , including icloud , itunes store and in app store . softwares , including os x and ios operating system , itunes , web browser , < unk> , including a productivity suite . paris is the capital and most populous city of france . situated on the seine river , in the north of the country , it is in the centre of the le-de-france region . the city of paris has a population of 2273305 inhabitants . this makes it the ﬁfth largest city in the european union measured by the population within the city limits . paris is the capital and most populated city in france . located in the <unk> , in the north of the country , it is the center of <unk> . paris , the city has a population of <num> inhabitants . this makes the eu ’ s population within the city limits of the ﬁfth largest city in the measurement .
on every visit to nyc , the hotel beacon is the place we love to stay . so conveniently located to central park , lincoln center and great local restaurants . the rooms are lovely . beds so comfortable , a great little kitchen and new wizz bang coffee maker . the staff are so accommodating and just love walking across the street to the fairway supermarket with every imaginable goodies to eat . every time in new york , lighthouse hotel is our favorite place to stay . very convenient , central park , lincoln center , and great restaurants . the room is wonderful , very comfortable bed , a kitchenette and a large explosion of coffee maker . the staff is so inclusive , just across the street to walk to the supermarket channel love with all kinds of what to eat .

Table 2: A few examples produced by the hierarchical LSTM alongside the inputs.

and (j − i ) denotes the distance between their mirrors in inputs. As we wish to penalize the degree of permutation in terms of text order, we penalize the absolute difference between the two computed distances. This metric is also relevant to the overall performance of prediction and recall: an irrelevant output will be aligned to a random input, thus being heavily penalized. The deﬁciency of the proposed metric is that it concerns itself only with a semantic perspective on coherence, barely considering syntactical issues.
4.4 Results
A summary of our experimental results is given in Table 3. We observe better performances for

the hotel-review dataset than the open domain Wikipedia dataset, for the intuitive reason that documents and sentences are written in a more ﬁxed format and easy to predict for hotel reviews.
The hierarchical model that considers sentencelevel structure outperforms standard sequenceto-sequence models. Attention models at the sentence level introduce performance boost over vanilla hierarchical models.
With respect to the coherence evaluation, the original sentence order is mostly preserved: the hierarchical model with attention achieves L = 1.57 on the hotel-review dataset, equivalent to the fact that the relative position of two input sentences are permuted by an average degree of 1.57. Even

Model Standard Hierarchical Hierarchical+Attention
Standard Hierarchical Hierarchical+Attention

Dataset Hotel Review Hotel Review Hotel Review
Wikipedia Wikipedia Wikipedia

BLEU 0.241 0.267 0.285
0.178 0.202 0.220

ROUGE-1 0.571 0.590 0.624
0.502 0.529 0.544

ROUGE-2 0.302 0.330 0.355
0.228 0.250 0.291

Coherence(L) 1.92 1.71 1.57
2.75 2.30 2.04

Table 3: Results for three models on two datasets. As with coherence score L, smaller values signiﬁes better performances.

for the Wikipedia dataset where more poor-quality sentences are observed, the original text order can still be adequately maintained with L = 2.04.
5 Discussion and Future Work
In this paper, we extended recent sequence-tosequence LSTM models to the task of multisentence generation. We trained an autoencoder to see how well LSTM models can reconstruct input documents of many sentences. We ﬁnd that the proposed hierarchical LSTM models can partially preserve the semantic and syntactic integrity of multi-text units and generate meaningful and grammatical sentences in coherent order. Our model performs better than standard sequence-tosequence models which do not consider the intrinsic hierarchical discourse structure of texts.
While our work on auto-encoding for larger texts is only a preliminary effort toward allowing neural models to deal with discourse, it nonetheless suggests that neural models are capable of encoding complex clues about how coherent texts are connected .
The performance on this autoencoder task could certainly also beneﬁt from more sophisticated neural models. For example one extension might align the sentence currently being generated with the original input sentence (similar to sequenceto-sequence translation in (0)), and later transform the original task to sentence-to-sentence generation. However our long-term goal here is not on perfecting this basic multi-text generation scenario of reconstructing input documents, but rather on extending it to more important applications.
That is, the autoencoder described in this work, where input sequence X is identical to output Y , is only the most basic instance of the family of document (paragraph)-to-document (paragraph) generation tasks. We hope the ideas proposed in this paper can play some role in enabling such

more sophisticated generation tasks like summarization, where the inputs are original documents and outputs are summaries or question answering, where inputs are questions and outputs are the actual wording of answers. Sophisticated generation tasks like summarization or dialogue systems could extend this paradigm, and could themselves beneﬁt from task-speciﬁc adaptations. In summarization, sentences to generate at each timestep might be pre-pointed to or pre-aligned to speciﬁc aspects, topics, or pieces of texts to be summarized. Dialogue systems could incorporate information about the user or the time course of the dialogue. In any case, we look forward to more sophi4d applications of neural models to the important task of natural language generation.
6 Acknowledgement
The authors want to thank Gabor Angeli, Sam Bowman, Percy Liang and other members of the Stanford NLP group for insightful comments and suggestion. We also thank the three anonymous ACL reviewers for helpful comments. This work is supported by Enlight Foundation Graduate Fellowship, and a gift from Bloomberg L.P, which we gratefully acknowledge.
References
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. 2014. Neural machine translation by jointly learning to align and translate. arXiv preprint arXiv:1409.0473.
Regina Barzilay and Mirella Lapata. 2008. Modeling local coherence: An entity-based approach. Computational Linguistics, 34(1):1–34.
Regina Barzilay and Lillian Lee. 2004. Catching the drift: Probabilistic content models, with applications to generation and summarization. arXiv preprint cs/0405039.

Asli Celikyilmaz and Dilek Hakkani-Tu¨r. 2011. Discovery of topically coherent sentences for extractive summarization. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies-Volume 1, pages 491–499. Association for Computational Linguistics.
Micha Elsner and Eugene Charniak. 2008. Coreference-inspired coherence modeling. In Proceedings of the 46th Annual Meeting of the Association for Computational Linguistics on Human Language Technologies: Short Papers, pages 41–44. Association for Computational Linguistics.
Vanessa Wei Feng and Graeme Hirst. 2012. Textlevel discourse parsing with rich linguistic features. In Proceedings of the 50th Annual Meeting of the Association for Computational Linguistics: Long Papers-Volume 1, pages 60–68. Association for Computational Linguistics.
Hugo Hernault, Helmut Prendinger, Mitsuru Ishizuka, et al. 2010. Hilda: a discourse parser using support vector machine classiﬁcation. Dialogue & Discourse, 1(3).
Sepp Hochreiter and Ju¨rgen Schmidhuber. 1997. Long short-term memory. Neural computation, 9(8):1735–1780.
Yangfeng Ji and Jacob Eisenstein. 2014. Representation learning for text-level discourse parsing. In Proceedings of the 52nd Annual Meeting of the Association for Computational Linguistics, volume 1, pages 13–24.
Mirella Lapata and Regina Barzilay. 2005. Automatic evaluation of text coherence: Models and representations. In IJCAI, volume 5, pages 1085–1090.
Alex Lascarides and Nicholas Asher. 1991. Discourse relations and defeasible knowledge. In Proceedings of the 29th annual meeting on Association for Computational Linguistics, pages 55–62. Association for Computational Linguistics.
Huong LeThanh, Geetha Abeysinghe, and Christian Huyck. 2004. Generating discourse structures for written texts. In Proceedings of the 20th international conference on Computational Linguistics, page 329. Association for Computational Linguistics.
Jiwei Li and Eduard Hovy. 2014. A model of coherence based on distributed sentence representation.
Jiwei Li, Rumeng Li, and Eduard Hovy. 2014. Recursive deep models for discourse parsing. In Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 2061–2069.
Chin-Yew Lin and Eduard Hovy. 2003. Automatic evaluation of summaries using n-gram cooccurrence statistics. In Proceedings of the 2003

Conference of the North American Chapter of the Association for Computational Linguistics on Human Language Technology-Volume 1, pages 71–78. Association for Computational Linguistics.
Ziheng Lin, Hwee Tou Ng, and Min-Yen Kan. 2011. Automatically evaluating text coherence using discourse relations. In Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics: Human Language Technologies-Volume 1, pages 997–1006. Association for Computational Linguistics.
Chin-Yew Lin. 2004. Rouge: A package for automatic evaluation of summaries. In Text Summarization Branches Out: Proceedings of the ACL-04 Workshop, pages 74–81.
Thang Luong, Ilya Sutskever, Quoc V Le, Oriol Vinyals, and Wojciech Zaremba. 2015. Addressing the rare word problem in neural machine translation. ACL.
William C Mann and Sandra A Thompson. 1988. Rhetorical structure theory: Toward a functional theory of text organization. Text, 8(3):243–281.
Daniel Marcu. 2000. The rhetorical parsing of unrestricted texts: A surface-based approach. Computational linguistics, 26(3):395–448.
Kishore Papineni, Salim Roukos, Todd Ward, and WeiJing Zhu. 2002. Bleu: a method for automatic evaluation of machine translation. In Proceedings of the 40th annual meeting on association for computational linguistics, pages 311–318. Association for Computational Linguistics.
Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. 2014. Sequence to sequence learning with neural networks. In Advances in Neural Information Processing Systems, pages 3104–3112.
Oriol Vinyals, Lukasz Kaiser, Terry Koo, Slav Petrov, Ilya Sutskever, and Geoffrey Hinton. 2014. Grammar as a foreign language. arXiv preprint arXiv:1412.7449.
Florian Wolf and Edward Gibson. 2005. Representing discourse coherence: A corpus-based study. Computational Linguistics, 31(2):249–287.
Kelvin Xu, Jimmy Ba, Ryan Kiros, Aaron Courville, Ruslan Salakhutdinov, Richard Zemel, and Yoshua Bengio. 2015. Show, attend and tell: Neural image caption generation with visual attention. arXiv preprint arXiv:1502.03044.
Rui Yan, Liang Kong, Congrui Huang, Xiaojun Wan, Xiaoming Li, and Yan Zhang. 2011a. Timeline generation through evolutionary trans-temporal summarization. In Proceedings of the Conference on Empirical Methods in Natural Language Processing, pages 433–443. Association for Computational Linguistics.

Rui Yan, Xiaojun Wan, Jahna Otterbacher, Liang Kong, Xiaoming Li, and Yan Zhang. 2011b. Evolutionary timeline summarization: a balanced optimization framework via iterative substitution. In Proceedings of the 34th international ACM SIGIR conference on Research and development in Information Retrieval, pages 745–754. ACM.

